service: wrapscan-registry-gateway

plugins:
  - serverless-domain-manager
  - serverless-rust

package: 
  individually: true

provider:
  name: aws
  runtime: rust
  region: us-east-1
  memorySize: 128
  timeout: 3
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ packagesTable, Arn ]
  environment:
    PACKAGES_TABLE: ${self:custom.packagesTable}
    WRAP_USER_KEY: ${self:custom.wrap_account.api_key}
    DEPLOYMENT_STAGE: prod

custom:
  serverless-offline:
    reloadHandler: true
  rust:
    dockerless: true
  customDomain:
    domainName: wraps.wrapscan.io
    certificateName: wraps.wrapscan.io
    createRoute53Record: true
  dynamodb:
    start:
      port: 8001
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
  packagesTable: wraps-table-prod
  wrap_account: ${ssm:/aws/reference/secretsmanager/wrap-account}

functions:
  home:
    handler: gateway_service
    events:
      - http:
          path: /
          method: get
          cors: true

  publish:
    handler: gateway_service
    events:
      - http:
          path: r/{user}/{packageAndVersion}
          method: post
          cors: true

  latestVersionInfo:
    handler: gateway_service
    events:
      - http:
          path: r/{user}/{packageAndVersion}
          method: get
          cors: true

  resolve:
    handler: gateway_service
    events:
      - http:
          path: r/{user}/{packageAndVersion}/{filePath}
          method: get
          cors: true

resources:
  Resources:
    packagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.packagesTable}